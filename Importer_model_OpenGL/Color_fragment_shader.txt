#version 330 core
out vec4 FragColor;

struct Material {
    vec4 ColorAmbient;
    vec4 ColorDiffuse;
    vec4 ColorSpecular;
    float Shininess;
};

struct Smart_texture {
	sampler2D texture;
	bool is_init;
};

struct DirLight {
	vec3 direction;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight {
	vec3 position;
	
	float constant;
	float linear;
	float quadratic;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct SpotLight {
	vec3 position;
	vec3 direction;
	float cutOff;
	float outerCutOff;
  
	float constant;
	float linear;
	float quadratic;
  
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;       
};

#define NR_POINT_LIGHTS 4

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;
in Material my_material;

uniform vec3 viewPos;
uniform DirLight dirLight;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform SpotLight spotLight;
uniform Smart_texture texture_diffuse1;
uniform Smart_texture texture_specular1;

// Прототипы функций
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{    
	// Свойства
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos - FragPos);
	
	// =====================================================
	// Наше освещение настраивается в 3 этапа: направленное освещение, точечный свет  и, опционально, фонарик.
	// Для каждого этапа определяется функция расчета, которая вычисляет соответствующий цвет от каждого источника света.
	// В функции main() мы берем все вычисленные цвета и складываем их вместе для определения окончательного цвета заданного фрагмента
	// =====================================================
	
	// Этап №1: Направленное освещение
	vec3 result = CalcDirLight(dirLight, norm, viewDir);

	// Этап №2: Точечные источники света
	for(int i = 0; i < NR_POINT_LIGHTS; i++)
		result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);   
	
	// Этап №3: Прожектор
	result += CalcSpotLight(spotLight, norm, FragPos, viewDir);    

	FragColor = vec4(result, 1.0);
}

// Вычисляем цвет при использовании направленного света
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
	vec3 lightDir = normalize(-light.direction);
	
	// Диффузное затенение
	float diff = max(dot(normal, lightDir), 0.0);
	
	// Отраженное затенение
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), my_material.Shininess);
	
	// Совмещаем результаты
	vec3 ambient = light.ambient * vec3(my_material.ColorAmbient.x, my_material.ColorAmbient.y, my_material.ColorAmbient.z);
	vec3 diffuse = light.diffuse * diff * vec3(my_material.ColorDiffuse.x, my_material.ColorDiffuse.y, my_material.ColorDiffuse.z);
	if (texture_diffuse1.is_init == true)
	{
		ambient *= vec3(texture(texture_diffuse1.texture, TexCoords));
		diffuse *= vec3(texture(texture_diffuse1.texture, TexCoords));
	}
	vec3 specular = light.specular * spec * vec3(my_material.ColorSpecular.x, my_material.ColorSpecular.y, my_material.ColorSpecular.z);
	if (texture_specular1.is_init == true)
		specular *= vec3(texture(texture_specular1.texture, TexCoords).rrr);
	return clamp(ambient + diffuse + specular, 0.0, 1.0);
}

// Вычисляем цвет при использовании точечного источника света
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);
	
	// Диффузное затенение
	float diff = max(dot(normal, lightDir), 0.0);
	
	// Отраженное затенение
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), my_material.Shininess);
	
	// Затухание
	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));   
	
	// Совмещаем результаты
	vec3 ambient = light.ambient * vec3(my_material.ColorAmbient.x, my_material.ColorAmbient.y, my_material.ColorAmbient.z);
	vec3 diffuse = light.diffuse * diff * vec3(my_material.ColorDiffuse.x, my_material.ColorDiffuse.y, my_material.ColorDiffuse.z);
	if (texture_diffuse1.is_init == true)
	{
		ambient *= vec3(texture(texture_diffuse1.texture, TexCoords));
		diffuse *= vec3(texture(texture_diffuse1.texture, TexCoords));
	}
	vec3 specular = light.specular * spec * vec3(my_material.ColorSpecular.x, my_material.ColorSpecular.y, my_material.ColorSpecular.z);
	if (texture_specular1.is_init == true)
		specular *= vec3(texture(texture_specular1.texture, TexCoords).rrr);
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;
	return clamp(ambient + diffuse + specular, 0.0, 1.0);
}

// Вычисляем цвет при использовании прожектора
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);
	
	// Диффузное затенение
	float diff = max(dot(normal, lightDir), 0.0);
	
	// Отраженное затенение
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), my_material.Shininess);
	
	// Затухание
	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); 
	
	// Интенсивность прожектора
	float theta = dot(lightDir, normalize(-light.direction)); 
	float epsilon = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
	
	// Совмещаем результаты
	vec3 ambient = light.ambient * vec3(my_material.ColorAmbient.x, my_material.ColorAmbient.y, my_material.ColorAmbient.z);
	vec3 diffuse = light.diffuse * diff * vec3(my_material.ColorDiffuse.x, my_material.ColorDiffuse.y, my_material.ColorDiffuse.z);
	if (texture_diffuse1.is_init == true)
	{
		ambient *= vec3(texture(texture_diffuse1.texture, TexCoords));
		diffuse *= vec3(texture(texture_diffuse1.texture, TexCoords));
	}
	vec3 specular = light.specular * spec * vec3(my_material.ColorSpecular.x, my_material.ColorSpecular.y, my_material.ColorSpecular.z);
	if (texture_specular1.is_init == true)
		specular *= vec3(texture(texture_specular1.texture, TexCoords).rrr);
	ambient *= attenuation * intensity;
	diffuse *= attenuation * intensity;
	specular *= attenuation * intensity;
	return clamp(ambient + diffuse + specular, 0.0, 1.0);
}