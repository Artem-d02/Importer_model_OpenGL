#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 5) in vec4 aColorAmbient;
layout (location = 6) in vec4 aColorDiffuse;
layout (location = 7) in vec4 aColorSpecular;
layout (location = 8) in float aShininess;

struct Material {
    vec4 ColorAmbient;
    vec4 ColorDiffuse;
    vec4 ColorSpecular;
    float Shininess;
};

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoords;
out Material my_material;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    FragPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(transpose(inverse(model))) * aNormal;  
    TexCoords = aTexCoords;
    my_material.ColorAmbient = aColorAmbient;
    my_material.ColorDiffuse = aColorDiffuse;
    my_material.ColorSpecular = aColorSpecular;
    my_material.Shininess = aShininess;

    gl_Position = projection * view * vec4(FragPos, 1.0);
}